/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(RuleParser)package jworldgen.parser;

import java.io.StringReader;
import jworldgen.filehandler.TextFileReader;

public class RuleParser{  public static void main(String args []) throws ParseException  {
    String input = TextFileReader.readTextFile("data/TestRules.txt");
    StringReader reader = new StringReader(input);    RuleParser parser = new RuleParser(reader);
        System.out.println("Reading TestRules.txt");    try    {      System.out.println(RuleParser.partition());    }    catch (Exception e)    {      System.out.println("NOK.");      System.out.println(e.getMessage());    }    catch (Error e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(RuleParser)SKIP :{  " "| "\r"| "\t"| "\n"
| "/*": IN_COMMENT}

< IN_COMMENT > SKIP:{
  < ~[] >}
< IN_COMMENT > SKIP :
{
  "*/": DEFAULT
}
TOKEN : /* Partitions */{  < ROOM : "Room" >| < AREA : "Area" >| < SUBAREA : "SubArea" >}

TOKEN : /* Room Keys */
{
  < WBLOCK : "WallBlock" >
| < FBLOCK : "FloorBlock" >
| < CBLOCK : "CeilingBlock" >
| < BG : "Background" >
}

TOKEN : /* Area Keys */
{
  < PROB : "Prob" (< DIGIT >)+ >
| < TYPE: "Type" (< DIGIT >)+ >
}

TOKEN : /* SubArea Keys */
{
  < ATYPE : "AreaType" >
| < RTYPE : "RoomType" >
| < XPOS : "xPos" >
| < YPOS : "yPos" >
| < WIDTH : "width" >
| < HEIGHT : "height" >
| < COUNT : "count" >
}
TOKEN : /* Misc Identifiers */{  < CONSTANT : (< DIGIT >)+ >
| < VALEXP : (< DIGIT >)+ | "$" < IDENT > >| < #DIGIT : [ "0"-"9" ] >
| < IDENT : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| < COMBEXP : < VALEXP > ":" < VALEXP > >
| < PROBEXP : < FLOAT > ":" < FLOAT > >
| < #FLOAT : < CONSTANT > "." < CONSTANT > | < CONSTANT > >}

Token probExp():{Token t;}{(t = < COMBEXP > | t = < PROBEXP >){return t;}}Token valExp():{Token t;}{(t = < CONSTANT > | t = < VALEXP >){return t;}}    int partition() :{int x;}{  room() x = partition()
  {
    return 2*x;
  }
  
| area() x = partition()
  {
    return 2*x+1;
  }
| < EOF >
  {
    return 0;  }}

void roomLine() :
{}
{
  < WBLOCK > "=" < IDENT >
| < FBLOCK > "=" < IDENT >
| < CBLOCK > "=" < IDENT >
| < BG > "=" < IDENT >
}

void areaLine() :
{}
{
  < PROB > "=" < CONSTANT >
| < TYPE > "=" < IDENT >
}

void subAreaLine() :
{}
{
  < ATYPE > "=" < IDENT >
| < RTYPE > "=" < IDENT >
| < COUNT > "=" < COMBEXP >
| < XPOS > "=" probExp()
| < YPOS > "=" probExp()
| < WIDTH > "=" probExp()
| < HEIGHT > "=" probExp()
}

void room() :
{}
{
  < ROOM > < IDENT > "{" (roomLine())* "}"
}

void subArea():
{}
{
  < SUBAREA > "{" (subAreaLine())* "}"}

void area():
{}
{  < AREA > < IDENT > "{" (areaLine() | subArea())* "}"
}
