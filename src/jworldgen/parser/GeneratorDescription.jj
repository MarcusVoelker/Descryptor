/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(RuleParser)package jworldgen.parser;

import java.io.StringReader;
import jworldgen.parser.parseStructure.*;

public class RuleParser{  public static ParseList parse(String ruleCode) throws ParseException  {
    StringReader reader = new StringReader(ruleCode);    RuleParser parser = new RuleParser(reader);
        System.out.println("Reading Code");    try    {      ParseList list = RuleParser.parseRoot();
      System.out.println(list.toString());
      return list;    }    catch (Exception e)    {      System.out.println("NOK.");      System.out.println(e.getMessage());
      return null;    }    catch (Error e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());
      return null;    }  }}PARSER_END(RuleParser)SKIP :{  " "| "\r"| "\t"| "\n"
| "/*": IN_COMMENT}

< IN_COMMENT > SKIP:{
  < ~[] >}
< IN_COMMENT > SKIP :
{
  "*/": DEFAULT
}
TOKEN : /* Partitions */{  < ROOM : "Room" >| < AREA : "Area" >| < SUBAREA : "SubArea" >}

TOKEN : /* Room Keys */
{
  < WBLOCK : "WallBlock" >
| < FBLOCK : "FloorBlock" >
| < CBLOCK : "CeilingBlock" >
| < BG : "Background" >
}

TOKEN : /* Area Keys */
{
  < PROB : "Prob" >
| < TYPE : "Type" >
}

TOKEN : /* SubArea Keys */
{
  < ATYPE : "AreaType" >
| < RTYPE : "RoomType" >
| < XPOS : "xPos" >
| < YPOS : "yPos" >
| < WIDTH : "width" >
| < HEIGHT : "height" >
| < COUNT : "count" >
}
TOKEN : /* Misc Identifiers */{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < IDENT : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| < FLOAT : < CONSTANT > "." < CONSTANT > >}

ParseList parseRoot():
{ParseList list = new ParseList();}
{	partition(list)
	{
	  return list;	}
}void partition(ParseList list) :{ParseRoom room; ParseArea area;}{  room = room() partition(list)
  {
    list.addRoom(room);
  }
  
| area = area() partition(list)
  {
    list.addArea(area);
  }
| < EOF >}

void roomLine(ParseRoom room) :
{Token block;}
{
  < WBLOCK > "=" block = < IDENT >
  {
    room.setWalls(block.image);  }
| < FBLOCK > "=" block = < IDENT >
  {
    room.setFloor(block.image);
  }
| < CBLOCK > "=" block = < IDENT >
  {
    room.setCeiling(block.image);
  }
| < BG > "=" block = < IDENT >
  {
    room.setBackground(block.image);
  }
}

void areaLine(ParseArea area) :
{Token probType; int id;}
{
  id = prob() "=" probType = < CONSTANT >
  {
    area.addProbability(Integer.parseInt(probType.image),id);  }
|
  id = type() "=" probType = < IDENT >
  {
    area.addType(probType.image,id);
  }
}

void subAreaLine(ParseSubArea subArea) :
{Token identifier; Integer leftInt = 0; Integer rightInt = 0; Float leftFloat = 0f; Float rightFloat = 0f;}
{
  < ATYPE > "=" identifier = < IDENT >
  {
    subArea.setAreaType(identifier.image);  }
| < RTYPE > "=" identifier = < IDENT >
  {
    subArea.setRoomType(identifier.image);
  }
| < COUNT > "=" combExp(leftInt,rightInt)
  {
    subArea.setCount(leftInt,rightInt);
  }
| < XPOS > "=" probExp(leftFloat,rightFloat)
  {
    subArea.setXPos(leftFloat,rightFloat);
  }
| < YPOS > "=" probExp(leftFloat,rightFloat)
  {
    subArea.setYPos(leftFloat,rightFloat);
  }
| < WIDTH > "=" probExp(leftFloat,rightFloat)
  {
    subArea.setWidth(leftFloat,rightFloat);
  }
| < HEIGHT > "=" probExp(leftFloat,rightFloat)
  {
    subArea.setHeight(leftFloat,rightFloat);
  }
}

ParseRoom room() :
{ParseRoom room = new ParseRoom(); Token ident;}
{
  < ROOM > ident = < IDENT > "{" (roomLine(room))* "}"
  {
    room.setIdentifier(ident.image);	return room;
  }
}

void subArea(ParseArea area):
{ParseSubArea subArea = new ParseSubArea();}
{
  < SUBAREA > "{" (subAreaLine(subArea))* "}"
  {	area.addSubArea(subArea);
  }}

ParseArea area():
{ParseArea area = new ParseArea(); Token ident;}
{  < AREA > ident = < IDENT > "{" (areaLine(area) | subArea(area))* "}"
  {
    area.setIdentifier(ident.image);	return area;
  }
}

void combExp(Integer leftVal, Integer rightVal):
{}
{	leftVal = intValExp() ":" rightVal = intValExp()
}

int intValExp():
{Token t;}{	t = < CONSTANT >
	{		return Integer.parseInt(t.image);
	}
|   t = "$n"
	{		return -1;
	}
|   t = "$i"
	{
		return -2;
	}
}

float floatValExp():
{Token t;}
{
	t = < FLOAT >
	{
		return Float.parseFloat(t.image);
	}
|   t = "$n"
	{
		return -1;
	}
|   t = "$i"
	{
		return -2;
	}
}

void probExp(Float leftVal, Float rightVal):
{}
{
	leftVal = floatValExp() ":" rightVal = floatValExp()
}

int prob():
{Token id;}
{	< PROB > id = < CONSTANT >
	{		return Integer.parseInt(id.image);
	}	
}

int type():
{Token id;}{
  < TYPE > id = < CONSTANT >
	{
		return Integer.parseInt(id.image);
	}}  