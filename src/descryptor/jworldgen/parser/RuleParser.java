/* Generated By:JavaCC: Do not edit this line. RuleParser.java */
package descryptor.jworldgen.parser;

import java.io.StringReader;
import java.util.Stack;
import java.util.LinkedList;
import descryptor.jworldgen.parser.parseStructure.*;
import descryptor.common.parser.parseStructure.*;
import descryptor.common.ale.ALEQueueElement;
import descryptor.common.ale.ALEElementType;
import descryptor.common.exceptionHandler.ExceptionLogger;
import descryptor.common.exceptionHandler.LoggerLevel;
import descryptor.common.exceptionHandler.exceptions.CriticalFailure;

public class RuleParser implements RuleParserConstants {
  public static ParseList parse(String ruleCode) throws CriticalFailure
  {
    StringReader reader = new StringReader(ruleCode);
    RuleParser parser = new RuleParser(reader);

    ExceptionLogger.log("Reading input...", LoggerLevel.COARSE);
    try
    {
      ParseList list = parser.parseRoot();
      ExceptionLogger.log("No syntactic errors detected", LoggerLevel.COARSE);
      return list;
    }
    catch (Exception e)
    {
      ExceptionLogger.logException(e,LoggerLevel.CRITICAL);
      return null;
    }
    catch (Error e)
    {
      ExceptionLogger.logException(e,LoggerLevel.CRITICAL);
      return null;
    }
  }

  public static ParseALE parseALE(String aleCode) throws CriticalFailure
  {
    StringReader reader = new StringReader(aleCode);
    RuleParser parser = new RuleParser(reader);

    try
    {
      ParseALE ale = parser.ale();
      return ale;
    }
    catch (Exception e)
    {
      ExceptionLogger.logException(e,LoggerLevel.CRITICAL);
      return null;
    }
    catch (Error e)
    {
      ExceptionLogger.logException(e,LoggerLevel.CRITICAL);
      return null;
    }
  }

  private static void incTopFunction(Stack opStack)
  {
        opStack.pop();
        if (!opStack.empty() && (opStack.peek() instanceof ALEQueueElement))
        {
                ALEQueueElement ele = (ALEQueueElement) opStack.peek();
                if (ele.type == ALEElementType.FUNCTION)
                {
                  int startPos = ele.identifier.indexOf("|")+1;
                  String arityString = ele.identifier.substring(startPos,ele.identifier.length());
                  int newArity = Integer.parseInt(arityString)+1;
                  ele.identifier = ele.identifier.substring(0,startPos-1)+"|"+newArity;
                }
        }
        opStack.push("(");
  }

  final public ParseList parseRoot() throws ParseException {
 ParseList list = new ParseList();
    partition(list);
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void partition(ParseList list) throws ParseException {
 ParseArea area; ParseModifier modifier; ParseModifierGroup mGroup;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AREA:
      area = area();
      partition(list);
    list.addArea(area);
      break;
    case MODIFIER:
      modifier = modifier();
      partition(list);
    list.addModifier(modifier);
      break;
    case MODIFIERGROUP:
      mGroup = modifierGroup();
      partition(list);
    list.addModifierGroup(mGroup);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void areaLine(ParseArea area) throws ParseException {
 Token probType; Token modType;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      jj_consume_token(55);
      probType = jj_consume_token(IDENT);
    area.setType(probType.image);
      break;
    case MODIFIERGROUP:
      jj_consume_token(MODIFIERGROUP);
      modType = jj_consume_token(IDENT);
        area.addModifierGroup(modType.image);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void modifierLine(ParseModifier modifier) throws ParseException {
 Token probType; Token id; ParseAssignment assignment;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODTYPE:
      jj_consume_token(MODTYPE);
      jj_consume_token(55);
      probType = jj_consume_token(IDENT);
    modifier.setType(probType.image);
      break;
    case IDENT:
      assignment = assignment();
    modifier.assignments.add(assignment);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void modifierGroupLine(ParseModifierGroup modifierGroup) throws ParseException {
 Token type; ParseALE ale; ParseAssignment assignment;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DRAW:
      jj_consume_token(DRAW);
      type = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        ale = ale();
      modifierGroup.addType(ale.toALE(), type.image);
        break;
      case EOL:
        jj_consume_token(EOL);
          modifierGroup.addType(null, type.image);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CHANGETYPE:
      jj_consume_token(CHANGETYPE);
      jj_consume_token(55);
      type = jj_consume_token(IDENT);
    modifierGroup.setChangeType(type.image);
      break;
    case MODIFIER:
      jj_consume_token(MODIFIER);
      type = jj_consume_token(IDENT);
    modifierGroup.addModifier(type.image);
      break;
    case IDENT:
      assignment = assignment();
    modifierGroup.assignments.add(assignment);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void subAreaLine(ParseSubArea subArea) throws ParseException {
 Token identifier; int[] ints; float[] floats; ParseAssignment assignment;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATYPE:
      jj_consume_token(ATYPE);
      jj_consume_token(55);
      identifier = jj_consume_token(IDENT);
    subArea.areaType = identifier.image;
      break;
    case IDENT:
      assignment = assignment();
    subArea.assignments.add(assignment);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void subArea(ParseArea area) throws ParseException {
 ParseSubArea subArea = new ParseSubArea();
    jj_consume_token(SUBAREA);
    jj_consume_token(56);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATYPE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      subAreaLine(subArea);
    }
    jj_consume_token(57);
        area.addSubArea(subArea);
  }

  final public ParseArea area() throws ParseException {
 ParseArea area = new ParseArea(); Token ident;
    jj_consume_token(AREA);
    ident = jj_consume_token(IDENT);
    jj_consume_token(56);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBAREA:
      case MODIFIERGROUP:
      case TYPE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIERGROUP:
      case TYPE:
        areaLine(area);
        break;
      case SUBAREA:
        subArea(area);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(57);
    area.setIdentifier(ident.image);
        {if (true) return area;}
    throw new Error("Missing return statement in function");
  }

  final public ParseModifier modifier() throws ParseException {
 ParseModifier modifier = new ParseModifier(); Token ident;
    jj_consume_token(MODIFIER);
    ident = jj_consume_token(IDENT);
    jj_consume_token(56);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODTYPE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      modifierLine(modifier);
    }
    jj_consume_token(57);
    modifier.setIdentifier(ident.image);
        {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  final public ParseModifierGroup modifierGroup() throws ParseException {
 ParseModifierGroup modifierGroup = new ParseModifierGroup(); Token ident;
    jj_consume_token(MODIFIERGROUP);
    ident = jj_consume_token(IDENT);
    jj_consume_token(56);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIER:
      case DRAW:
      case CHANGETYPE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      modifierGroupLine(modifierGroup);
    }
    jj_consume_token(57);
    modifierGroup.setIdentifier(ident.image);
    {if (true) return modifierGroup;}
    throw new Error("Missing return statement in function");
  }

  final public ParseAssignment assignment() throws ParseException {
 Token t; ParseALE ale;
    t = jj_consume_token(IDENT);
    jj_consume_token(55);
    ale = ale();
    {if (true) return new ParseAssignment(t.image,ale);}
    throw new Error("Missing return statement in function");
  }

  final public ParseALE ale() throws ParseException {
 LinkedList<ALEQueueElement> output = new LinkedList();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
      case RANDOM:
      case EQUALS:
      case NEQUALS:
      case GREATER:
      case GOE:
      case LESS:
      case LOE:
      case AND:
      case OR:
      case NOT:
      case BIT_AND:
      case BIT_OR:
      case BIT_NOT:
      case SIN:
      case COS:
      case TAN:
      case ASIN:
      case ACOS:
      case ATAN:
      case SQRT:
      case ABS:
      case FLOOR:
      case INTEGER:
      case IDENT:
      case FLOAT:
      case 58:
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      aleElement(output);
    }
    jj_consume_token(EOL);
    {if (true) return new ParseALE(output);}
    throw new Error("Missing return statement in function");
  }

  final public void aleElement(LinkedList<ALEQueueElement> queue) throws ParseException {
 Token t; ALEElementType type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case MODULO:
    case RANDOM:
    case EQUALS:
    case NEQUALS:
    case GREATER:
    case GOE:
    case LESS:
    case LOE:
    case AND:
    case OR:
    case NOT:
    case BIT_AND:
    case BIT_OR:
    case BIT_NOT:
    case SIN:
    case COS:
    case TAN:
    case ASIN:
    case ACOS:
    case ATAN:
    case SQRT:
    case ABS:
    case FLOOR:
    case INTEGER:
    case FLOAT:
    case 58:
    case 59:
    case 60:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        t = jj_consume_token(EQUALS);
                           type = ALEElementType.EQUALS;
        break;
      case NEQUALS:
        t = jj_consume_token(NEQUALS);
                            type = ALEElementType.NEQUALS;
        break;
      case GREATER:
        t = jj_consume_token(GREATER);
                            type = ALEElementType.GREATER;
        break;
      case GOE:
        t = jj_consume_token(GOE);
                        type = ALEElementType.GOE;
        break;
      case LESS:
        t = jj_consume_token(LESS);
                         type = ALEElementType.LESS;
        break;
      case LOE:
        t = jj_consume_token(LOE);
                        type = ALEElementType.LOE;
        break;
      case NOT:
        t = jj_consume_token(NOT);
                        type = ALEElementType.NOT;
        break;
      case BIT_NOT:
        t = jj_consume_token(BIT_NOT);
                            type = ALEElementType.BITWISE_NOT;
        break;
      case AND:
        t = jj_consume_token(AND);
                        type = ALEElementType.AND;
        break;
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
                            type = ALEElementType.BITWISE_AND;
        break;
      case OR:
        t = jj_consume_token(OR);
                       type = ALEElementType.OR;
        break;
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
                           type = ALEElementType.BITWISE_OR;
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
                         type = ALEElementType.PLUS;
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                          type = ALEElementType.MINUS;
        break;
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
                             type = ALEElementType.MULTIPLY;
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
                           type = ALEElementType.DIVIDE;
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
                           type = ALEElementType.MODULO;
        break;
      case RANDOM:
        t = jj_consume_token(RANDOM);
                           type = ALEElementType.RANDOM;
        break;
      case SIN:
        t = jj_consume_token(SIN);
                        type = ALEElementType.SINE;
        break;
      case COS:
        t = jj_consume_token(COS);
                        type = ALEElementType.COSINE;
        break;
      case TAN:
        t = jj_consume_token(TAN);
                        type = ALEElementType.TANGENT;
        break;
      case ASIN:
        t = jj_consume_token(ASIN);
                         type = ALEElementType.ARCSINE;
        break;
      case ACOS:
        t = jj_consume_token(ACOS);
                         type = ALEElementType.ARCCOSINE;
        break;
      case ATAN:
        t = jj_consume_token(ATAN);
                         type = ALEElementType.ARCTANGENT;
        break;
      case SQRT:
        t = jj_consume_token(SQRT);
                         type = ALEElementType.SQRT;
        break;
      case ABS:
        t = jj_consume_token(ABS);
                        type = ALEElementType.ABSOLUTE;
        break;
      case FLOOR:
        t = jj_consume_token(FLOOR);
                          type = ALEElementType.FLOOR;
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                          type = ALEElementType.FLOAT;
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                            type = ALEElementType.INTEGER;
        break;
      case 58:
        t = jj_consume_token(58);
                    type = ALEElementType.WRAPPER;
        break;
      case 59:
        t = jj_consume_token(59);
                    type = ALEElementType.WRAPPER;
        break;
      case 60:
        t = jj_consume_token(60);
                    type = ALEElementType.WRAPPER;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                queue.add(new ALEQueueElement(t.image,type));
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        jj_consume_token(58);
                  type = ALEElementType.FUNCTION;
                  queue.add(new ALEQueueElement(t.image+"|0",type));
                  queue.add(new ALEQueueElement("(",ALEElementType.WRAPPER));
        break;
      default:
        jj_la1[13] = jj_gen;
                  type = ALEElementType.VARIABLE;
                  queue.add(new ALEQueueElement(t.image,type));
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public RuleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xd01,0x40800,0x80000,0x20000,0x110400,0x200000,0x200000,0x40a00,0x40a00,0x80000,0x110400,0xffc00000,0xffc00000,0x0,0xffc00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100000,0x400000,0x100000,0x100000,0x100000,0x0,0x0,0x100000,0x100000,0x1c35ffff,0x1c25ffff,0x4000000,0x1c35ffff,};
   }

  /** Constructor with InputStream. */
  public RuleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RuleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RuleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RuleParser(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
