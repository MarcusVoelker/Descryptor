/* Generated By:JavaCC: Do not edit this line. RuleParserConstants.java */
package descryptor.jworldgen.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RuleParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AREA = 8;
  /** RegularExpression Id. */
  int SUBAREA = 9;
  /** RegularExpression Id. */
  int MODIFIER = 10;
  /** RegularExpression Id. */
  int MODIFIERGROUP = 11;
  /** RegularExpression Id. */
  int WBLOCK = 12;
  /** RegularExpression Id. */
  int FBLOCK = 13;
  /** RegularExpression Id. */
  int CBLOCK = 14;
  /** RegularExpression Id. */
  int BG = 15;
  /** RegularExpression Id. */
  int DRAW = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int TYPE = 18;
  /** RegularExpression Id. */
  int MODTYPE = 19;
  /** RegularExpression Id. */
  int CHANGETYPE = 20;
  /** RegularExpression Id. */
  int ATYPE = 21;
  /** RegularExpression Id. */
  int PLUS = 22;
  /** RegularExpression Id. */
  int MINUS = 23;
  /** RegularExpression Id. */
  int MULTIPLY = 24;
  /** RegularExpression Id. */
  int DIVIDE = 25;
  /** RegularExpression Id. */
  int MODULO = 26;
  /** RegularExpression Id. */
  int RANDOM = 27;
  /** RegularExpression Id. */
  int EQUALS = 28;
  /** RegularExpression Id. */
  int NEQUALS = 29;
  /** RegularExpression Id. */
  int GREATER = 30;
  /** RegularExpression Id. */
  int GOE = 31;
  /** RegularExpression Id. */
  int LESS = 32;
  /** RegularExpression Id. */
  int LOE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int BIT_AND = 37;
  /** RegularExpression Id. */
  int BIT_OR = 38;
  /** RegularExpression Id. */
  int BIT_NOT = 39;
  /** RegularExpression Id. */
  int SIN = 40;
  /** RegularExpression Id. */
  int COS = 41;
  /** RegularExpression Id. */
  int TAN = 42;
  /** RegularExpression Id. */
  int ASIN = 43;
  /** RegularExpression Id. */
  int ACOS = 44;
  /** RegularExpression Id. */
  int ATAN = 45;
  /** RegularExpression Id. */
  int SQRT = 46;
  /** RegularExpression Id. */
  int ABS = 47;
  /** RegularExpression Id. */
  int FLOOR = 48;
  /** RegularExpression Id. */
  int SPECIAL = 49;
  /** RegularExpression Id. */
  int INTEGER = 50;
  /** RegularExpression Id. */
  int DIGIT = 51;
  /** RegularExpression Id. */
  int IDENT = 52;
  /** RegularExpression Id. */
  int FLOAT = 53;
  /** RegularExpression Id. */
  int EOL = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "<token of kind 6>",
    "\"*/\"",
    "\"Area\"",
    "\"SubArea\"",
    "\"Modifier\"",
    "\"ModifierGroup\"",
    "\"WallBlock\"",
    "\"FloorBlock\"",
    "\"CeilingBlock\"",
    "\"Background\"",
    "\"Draw\"",
    "\"if\"",
    "\"Type\"",
    "\"ModType\"",
    "\"ChangeType\"",
    "\"AreaType\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\":\"",
    "\"==\"",
    "\"!=\"",
    "\" >\"",
    "\" >=\"",
    "\"< \"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"~\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"sqrt\"",
    "\"abs\"",
    "\"floor\"",
    "\"$\"",
    "<INTEGER>",
    "<DIGIT>",
    "<IDENT>",
    "<FLOAT>",
    "\";\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\",\"",
    "\")\"",
  };

}
